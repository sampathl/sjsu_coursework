//1 
/**
   This program reads in the name of a file from stdin.
   Then it opens the file and reads all lines of the file.
   Each line has the form 

   label     value

   The label is a nonempty string without spaces. The value
   is a floating-point number. 

   Print out the label with the smallest and largest value, 
   in a left-justified, field of width 50, followed by the value
   in a right-justified field of width 12, with two digits after
   the decimal point.
*/

#include <iostream>
#include <iomanip>
#include <fstream>

using namespace std;

int main()
{
   cout << "Input file:" << endl;
   string input_file;
   cin >> input_file;
   ifstream in(input_file);
   string a;
   string am;
   string as;
   double b;
     double bm;
       double bs;
  
   in >>a;
   in >>b;
   bm=b;
   bs=b;
   am= a;
   as=a;
   while(!(in.eof())) 
   {
   in >>a;
   in >>b;
   if (bm < b)
   {
      bm=b;
      am=a;
   }
   
   if (b < bs)
   {
      bs=b;
      as=a;
   }
   
   
   } 
   
   cout<<fixed<<setprecision(2)<<setw(50)<<left<<as<<setw(12)<<right<<bs<<endl;
   cout<<fixed<<setprecision(2)<<setw(50)<<left<<am<<setw(12)<<right<<bm<<endl;
   
   in.close();
   return 0;
}

//2

/**
   Computes the average of all odd elements in the given array.
   @param a an array of integers
   @param alen the number of elements in a
   @return the average of all odd elements in a, or 0 if there are none.
*/
double oddavg(int a[], int alen)
{
   int i=0;
   int counter=0;
   double avg=0;
   for (a[i]; i<alen; i++)
   {
      if (a[i]%2!=0)
      {
         counter = counter+1;
         avg=avg+a[i];
      }
   }
   if (counter ==0)
   {
      return (0);
   }
   else 
   {
      avg=avg/counter;
      return(avg);
   }
   
}
//3

#include <vector>
using namespace std;

/**
   Swaps the second and second-to-last value of a.
   For example, if a is {3, 1, 4, 1, 5, 9, 2, 6}
   after calling this method it is {3, 2, 4, 1, 5, 9, 1, 6}.
   If the array has length < 2, do nothing.
   @param a a vector of integers      
*/
void swap2(vector<int>& a)
{
   int size;
   int z;
   int y;
   size= a.size();
  if (size>=2)
   {
      z= a[1];
      y=a[size-2];
      a[1]=y;
      a[size-2]=z;
   }
   
}      
//4

#include <vector>
using namespace std;

/**
   Replaces each element in an array with the difference of its
   neighbors. The first and last element are not changed. Do 
   not declare any arrays or vectors.
   @param a an array
   @param n the length of the array
*/
void neighbordiff(double a[], int n)
{
   double z=0;
   int x=0;
   for (int i=1; i<n-1; i++)
   {
      if (i==1) {z= a[i-1]-a[i+1];}
      else {z= x-a[i+1];}
   x=a[i];
      a[i]=z;
    
   }
}      
//5
#include <string>
using namespace std;

/**
   Return a string that mixes the characters in strings a and b.
   If one string is longer than the other, append the suffix.
   For example, mixing "San" and "Francisco" yields "SFarnancisco".
*/
string splice(string a, string b)
{
   string x;
   int z=0;
   int y=0;
   int counter=0;
   
   if (a.length() < b.length())
   {
    z= b.length();
   
   }
   else if (a.length() > b.length()) 
   {
      z = a.length();
      
   }
   else z = a.length();
   
   for (int i=0; i<z; i++)
   {
      if(i<(a.length())) x=x+a.at(i);
      if (i<(b.length())) x=x+b.at(i);
      y=i+1;
   }
   
   
   return (x);
}
