1:

{
double la= largest (a,b,c,d);
double sa=largest(-a,-b,-c,-d);
   
double av= ((a+b+c+d)-(la-sa))/2;
return av;
}


2:

#include <string>

using namespace std;
/**
   Turn a string of the form firstname lastname or 
   firstname middlename(s) lastname into lastname, firstname 
   (and middlenames if present). 
   For example, normalize_name("John Pierpont Flathead") should return
   "Flathead, John Pierpont". If the string contains no spaces, return
   it unchanged. Also, if the string already contains a comma, return
   it unchanged.
   Hint: If s is a string, then s.length() is the number of characters
   in the string and s.substr(i, n) is the substring
   starting at index i of length n. And if s and t are two strings,
   then s + t is the concatenation of the two strings. You will want
   to return a string of the form 
   s.substr(i1, n1) + ", " + s.substr(i2, n2)
   except if s contains no spaces.
   To find a space at position i, you can test whether s.substr(i, 1) == " ".
*/
string normalize_name(string s)
{
   int n = s.length();
   int counter=0;
   int j;
   for (j = 0; j < n; j++)
   {
      if (s.substr(j, 1) == " ") counter = counter+1;
      if (s.substr(j, 1) == ",") return s;
   }
   
   if (counter == 0) return s;
   int spa=0;
   
   
      for (j = n; j >0 ; j=j-1)
      {
         if (s.substr(j,1) ==" ") 
         {
            spa = j+1;
            break;
         }
      }
      
   return (s.substr(spa,s.length()-spa) + ", " + s.substr(0,spa-1));
   
}


3:
#include <string>

using namespace std;

/**
   Returns true if c is a vowel.
*/
bool is_vowel(string c)
{
   return c == "a" || c == "e" || c == "i" || c == "o" || c == "u"
      || c == "A" || c == "E" || c == "I" || c == "O" || c == "U";
}

/**
   Sets first to the index of the first vowel in the string s
   and last to the index of the last vowel in s. If s has no vowels,
   first and last are set to -1.
*/
void first_last_vowel_position(string s, int& first, int& last)
{
   int j;
  first=-2;
   last=-2;
   
   if (first==-2 && last==-2)
   {
      first= -1;
      last= -1;
   }
   
   for (j = 0; j <s.length() ; j=j+1)
      {
         if (is_vowel(s.substr(j,1))) 
         {
            first = j;
            break;
         }
      }
   
   for (j = s.length(); j >0 ; j=j-1)
      {
         if (is_vowel(s.substr(j,1))) 
         {
            last = j;
            break;
         }
      }

   
}


4:
#include <string>

using namespace std;

/**
   Returns true if c is a vowel.
*/
bool is_vowel(string c)
{
   return c == "a" || c == "e" || c == "i" || c == "o" || c == "u"
      || c == "A" || c == "E" || c == "I" || c == "O" || c == "U";
}

/**
   Swaps the first and last vowel in the string s. 
   For example, if s is "Farewell", it is changed to "Ferewall".
*/
void swap_first_last_vowel(string& s)
{
   int j;
  int f=-1;
   int l=-1;
   string fir;
   string las;
   
   
   for (j = 0; j <s.length() ; j=j+1)
      {
         if (is_vowel(s.substr(j,1))) 
         {
            f = j;
            break;
         }
      }
   
   for (j = s.length(); j >0 ; j=j-1)
      {
         if (is_vowel(s.substr(j,1))) 
         {
            l = j;
            break;
         }
      }
      
      
if (l!=f) 
{
 fir=(s.substr(0,f) +s.substr(l,1)+ s.substr(f+1,l-(f+1))+ s.substr(f,1)+ s.substr(l+1,s.length()-(l+1)));
 s=fir;
}
else if (l==f)
{
   fir=(s.substr(0,f) +s.substr(l,1)+ s.substr(l+1,s.length()-(l+1)));
}
}


5:
#include <string>
using namespace std;


/**
   Given a letter grade (A, B, C, D, F) possibly with a suffix (+ or -)
   produce the numerical value of the grade. An A is a 4, B a 3, 
   C a 2, D a 1, and F a zero. The suffix + adds 0.3, the suffix
   - subtracts 0.3. However, an A+ has value 4. Invalid grades have
   a value of -1. (This includes F+ and F-, as well as any other malformed
   grades.)
 */
double gradeValue(string grade)
{
   string suff;
   string gr;
   double sco;
   int counter=0;
   
   if (grade.length()==0)
   {
      sco=-1;
   }
      else if (grade.substr(1,1)== "+" || grade.substr(1,1)=="-")
   {
      suff=grade.substr(1,1);
      gr=grade.substr(0,1);
      counter = 1;
   }
   else if(grade.length()==1)
   {
      gr=grade.substr(0,1);
   }
   
   if (gr=="A") 
   {
         sco=4; 
   }
   else if (gr=="B") 
   {
      sco=3;
   }
   else if (gr=="C")
   {
      sco=2;
   }
   else if (gr=="D")
   {
      sco=1;
   }
   else if (gr=="F") 
   {
      sco=0;
   }
   else 
   {
         sco=-1;
   }
   
   if (counter==1)
   {
      if (sco<=4)
      {
         if (sco==0)
         {
            sco=-1;
         }
         else if (sco>0) 
         {
            if (grade.substr(1,1)== "+")
            {
               sco=sco+0.3;
            }
            else if (grade.substr(1,1)=="-")
            {
               sco=sco-0.3;
            }
         }
      }
   }
}
